# -*- coding: utf-8 -*-
"""polygon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iItLDAmkQH9fQ4YrvMEnur3T50fb1b-D
"""

import math


class Polygon:
    """ 
    A class which generates a regular strict convex polygon with desired vertex and circumradius
    """
    def __init__(self, vertices, circumradius):
        """
        A constructor to initialize the Polygon class attributes
        """
        self.vertices = vertices # Number of vertices of polygon
        self.circumradius = circumradius # Circumradius

    @property
    def vertices(self):
        """A function to calculate number of vertices"""
        return self.vertices


    def vertices(self, vertices):
        """A function to set the number of vertices of polygon"""
        if not isinstance(vertices, int):
            raise TypeError(f'Number of edges/vertices should be of type integer')
        if vertices < 3:
            raise ValueError(f'Number of edges/vertices should be greater than or equal to 3')

        self.vertices = vertices

    @property
    def circumradius(self):
        """A function to calculate circumradius"""
        return self.circumradius

    
    def circumradius(self, circumradius):
        """A function to set the circumradius of polygon"""
        if not isinstance(circumradius, int):
            raise TypeError(f'Circumradius should be of type integer')
        if radius < 0:
            raise ValueError(f'Circumradius should be greater than 0')

        self.circumradius = circumradius

    @property
    def num_of_edges(self):
        """A function to calculate number of edges"""
        return(self.vertices)

    @property
    def interior_angle(self):
        """A function to calculate interior angle """
        return((self.vertices - 2)*(180/self.vertices))

    @property
    def edge_len(self):
        """A function to calculate edge length """
        return(2 * self.circumradius * math.sin(math.pi / self.vertices))

    @property
    def apothem(self):
        """Get apothem value"""
        return(self.circumradius * math.cos(math.pi / self.vertices))

    @property
    def area(self):
        """A function to calculate area """
        return(0.5 * (self.vertices * self.edge_len * self.apothem))

    @property
    def perimeter(self):
        """A function to calculate perimeter """
        return(self.vertices * self.edge_len)

    def __repr__(self):
        """ A representation function """
        return (f'Polygon({self.vertices}, {self.circumradius})')

    def __eq__(self,other):
        """ Check for the equality of Polygon"""
        if isinstance(other, Polygon):
            return(self.vertices == other.vertices and self.circumradius == other.circumradius)
        else:
            raise NotImplementedError('Incorrect data type')

    def __gt__(self,other):
        """ Check for the greater than ineqaulity for Polygon"""
        if isinstance(other, Polygon):
            return(self.vertices > other.vertices)
        else:
            raise NotImplementedError('Incorrect data type')